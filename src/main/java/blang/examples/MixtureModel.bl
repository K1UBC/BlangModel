package blang.examples

import blang.types.IntVar
import blang.types.RealVar
import java.util.List

import static extension blang.utils.ExtensionUtils.* 

model MixtureModel { 
  
  random  List<RealVar>  observations 
  random  List<IntVar>   clusterIndicators  ?:  listOfIntVars(observations.size) 
  random  RealVar        pi
  random  List<RealVar>  means              ?:  listOfRealVars(2), 
                         variances          ?:  listOfRealVars(2)
  param   RealVar        hyperMean,
                         hyperVariance,
                         alpha,
                         beta 
  
  laws {
    
    pi ~ Beta([1.0], [1.0])
    
    // priors on each mixture component mean and variance
    for (int mixIdx : 0 ..< means.size) { 
      means.get(mixIdx)     ~ Normal([0.0], [1.0])
      variances.get(mixIdx) ~ Gamma([1.0], [1.0])
    }
    
    for (int obsIdx : 0 ..< observations.size) {
      // prior over mixture indicators
      clusterIndicators.get(obsIdx) | pi ~ Bernoulli(pi)
      // likelihood:
      observations.get(obsIdx) |
        means, variances, 
        IntVar curIndic = clusterIndicators.get(obsIdx)
        ~ Normal(
          means.get(curIndic),
          variances.get(curIndic) 
        )
    }
  }
}