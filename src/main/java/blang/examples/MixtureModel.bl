import blang.utils.StaticUtils 
import blang.types.IntVar
import blang.types.RealVar
import blang.types.Table
import blang.types.Plate
import static blang.types.Plate.eachIn
import blang.types.Index

//import blang.types.Plated.Index
//import blang.types.Plated.Plate

model {
  
  param Plate<Integer> sample
  param Plate<Integer> mixture
  
  param RealVar hyperMean
  param RealVar logHyperVar
  
  random RealVar logPi
  random Table<RealVar> means
  random Table<RealVar> logVariances
  
  random Table<IntVar> clusterIndicators
  random Table<RealVar> observations
  
  init {
    sample.contains(clusterIndicators, observations)
    mixture.contains(means, logVariances)
  }
  
  laws {
    
    logPi | hyperMean, logHyperVar ~ Normal(hyperMean, [Math.exp(logHyperVar.doubleValue)])
    
    // priors on each mixture component mean and variance
    for (Index<Integer> mixtureIndex : eachIn(mixture)) {
      means.get(mixtureIndex) | hyperMean, logHyperVar ~ Normal(hyperMean, [Math.exp(logHyperVar.doubleValue)])
      logVariances.get(mixtureIndex) | hyperMean, logHyperVar ~ Normal(hyperMean, [Math.exp(logHyperVar.doubleValue)])
    }
    
    for (Index<Integer> sampleIndex : eachIn(sample)) {
      // prior over mixture indicators
      clusterIndicators.get(sampleIndex) | logPi ~ Bernoulli([StaticUtils::logistic(logPi.doubleValue)])
      // likelihood:
      observations.get(sampleIndex) | 
        RealVar mean0 = means.get(mixture.index(0)), 
        RealVar mean1 = means.get(mixture.index(1)),
        RealVar logVar0 = logVariances.get(mixture.index(0)),
        RealVar logVar1 = logVariances.get(mixture.index(1)),
        IntVar curIndic = clusterIndicators.get(sampleIndex)
        ~ Normal(
           if (curIndic.intValue === 0) logVar0                       else if (curIndic.intValue === 1) logVar1                       else throw new RuntimeException,
          [if (curIndic.intValue === 0) Math.exp(logVar0.doubleValue) else if (curIndic.intValue === 1) Math.exp(logVar1.doubleValue) else throw new RuntimeException] 
        )
    }
  }
}