import java.util.List
import blang.utils.StaticUtils import blang.types.IntVar
import blang.types.RealVar
import blang.types.Plated
//import blang.types.Plated.Index
//import blang.types.Plated.Plate

model {
  
//  random Plate<Integer> observation  /* these will need to be constants */
//  random Plate<Integer> mixture
//  
//  param RealVar m
//  param RealVar v
//  param RealVar observationV
//  
//  random RealVar piLog
//  random Plated<RealVar> means
//  random Plated<IntVar>  mixtureIndicators
//  random Plated<RealVar> observations
  
  laws {
    
//    piLog | m, v ~ Normal(m, v)
//    
//    for (Index<Integer> compIdx : means.eachDistinct(mixture)) {  
//      means.get(compIdx) | m, v ~ Normal(m, v)
//    }
//    
//    for (Index<Integer> obsIdx : observations.eachDistinct(observation)) {
//      mixtureIndicators.get(obsIdx) | piLog 
//        ~ Bernoulli([StaticUtils::logistic(piLog.doubleValue)])
//      observations.get(obsIdx) | observationV, means, IntVar curIndic = mixtureIndicators.get(obsIdx) /* to remove: */ , observation
//        ~ Normal(means.get(observation.index(curIndic.intValue)), observationV)
//    }
  }
}