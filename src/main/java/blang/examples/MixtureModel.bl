import blang.utils.StaticUtils 
import blang.types.IntVar
import blang.types.RealVar
import blang.types.Table
import blang.types.Plate
import blang.types.Index
import java.util.List

import static extension blang.utils.ExtensionUtils.* 

model {
  
  param  Plate<Integer> sample, mixture
  param  RealVar hyperMean, logHyperVar
  
  random RealVar logPi
  random Table<RealVar> means, logVariances
  
  random Table<IntVar> clusterIndicators
  random Table<RealVar> observations
  
  init {
    sample.contains(clusterIndicators, observations)
    mixture.contains(means, logVariances)
  }
  
  laws {
    
    logPi | hyperMean, logHyperVar ~ Normal(hyperMean, [exp(logHyperVar)])
    
    // priors on each mixture component mean and variance
    for (Index<Integer> mixtureIndex : mixture.indices) {
      means.get(mixtureIndex) | hyperMean, logHyperVar ~ Normal(hyperMean, [exp(logHyperVar)])
      logVariances.get(mixtureIndex) | hyperMean, logHyperVar ~ Normal(hyperMean, [exp(logHyperVar)])
    }
    
    for (Index<Integer> sampleIndex : sample.indices) {
      // prior over mixture indicators
      clusterIndicators.get(sampleIndex) | logPi ~ Bernoulli([StaticUtils::logistic(logPi)])
      // likelihood:
      observations.get(sampleIndex) | 
        List<RealVar> listOfMeans = means.getList(mixture), 
        List<RealVar> listOfLogVars = logVariances.getList(mixture), 
        IntVar curIndic = clusterIndicators.get(sampleIndex)
        ~ Normal(
          listOfMeans.get(curIndic),
          [exp(listOfLogVars.get(curIndic))] 
        )
    }
  }
}