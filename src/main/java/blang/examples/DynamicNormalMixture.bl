package blang.examples

model DynamicNormalMixture  { 
  
  random List<RealVar>     observations 
  random List<IntVar>      states                   
  
  param  int               nLatentStates            
  
  random Simplex           initialDistribution      
  random TransitionMatrix  transitionProbabilities  
  random List<RealVar>     means, variances 
           
  param  Matrix            concentrations    
  
  laws {
    // Priors on initial and transition probabilities
    initialDistribution | concentrations ~ Dirichlet(concentrations)  
    for (int latentStateIdx : 0 ..< means.size) {
      transitionProbabilities.row(latentStateIdx) | concentrations ~ Dirichlet(concentrations)
    }
    
    // Priors on means and variances
    for (int latentStateIdx : 0 ..< means.size) {
      means.get(latentStateIdx)  ~ Normal(0.0, 1.0)
      variances.get(latentStateIdx) ~ Gamma(1.0, 1.0)
    }
    
    states | initialDistribution, transitionProbabilities  
      ~ MarkovModel(initialDistribution, transitionProbabilities)
      
    // Gaussian emissions
    for (int obsIdx : 0 ..< observations.size) {
      observations.get(obsIdx) |
        means, 
        variances, 
        IntVar curIndic = states.get(obsIdx)
      ~ Normal(means.get(curIndic), variances.get(curIndic))
    }
  }
}