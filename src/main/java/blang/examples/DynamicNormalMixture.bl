package blang.examples

import blang.types.Simplex
import blang.types.Plate
import blang.types.IntVar
import blang.types.Table
import xlinear.Matrix
import blang.types.RealVar
import blang.types.Index
import java.util.List

import static extension blang.utils.ExtensionUtils.*
import blang.distributions.Dirichlet
import blang.distributions.Normal
import blang.distributions.Gamma

model {
  
  param Plate<Integer> time, latent
  
  param Matrix concentrations
  param RealVar hyperMean, hyperVariance
  param RealVar hyperShape, hyperRate
  
  random Simplex initialDistribution
  random Table<Simplex> transitionProbabilities
  random Table<RealVar> means, variances
  
  random Table<IntVar> states
  random Table<RealVar> observations
  
  init {
    time.contains(states)
    latent.contains(transitionProbabilities, means, variances)
  }
  
  laws {
    
    // Priors on initial and transition probabilities
    initialDistribution | concentrations ~ Dirichlet(concentrations)
    for (Index<Integer> stateIndex : latent.indices) {
      transitionProbabilities.get(stateIndex) | concentrations ~ Dirichlet(concentrations)
    }
    
    // Priors on means and variances
    for (Index<Integer> latentIndex : latent.indices) {
      means.get(latentIndex) | hyperMean, hyperVariance ~ Normal(hyperMean, hyperVariance)
      variances.get(latentIndex) | hyperShape, hyperRate ~ Gamma(hyperShape, hyperRate)
    }
    
    states | latent, time, initialDistribution, transitionProbabilities  
      ~ MarkovModel(time, latent, initialDistribution, transitionProbabilities)
      
    // Gaussian emissions
    for (Index<Integer> step : time.indices) {
      observations.get(step) | 
        List<RealVar> listOfMeans = means.getList(latent), 
        List<RealVar> listOfVars = variances.getList(latent),
        IntVar curIndic = states.get(step)
      ~ Normal(listOfMeans.get(curIndic), listOfVars.get(curIndic))
    }
    
  }
}