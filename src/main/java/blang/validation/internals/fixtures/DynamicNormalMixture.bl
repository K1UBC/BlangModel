package blang.examples

model DynamicNormalMixture  { 
  
  param  int               nLatentStates 
  
  random List<RealVar>     observations 
  random List<IntVar>      states ?: latentListOfInt(observations.size)  
  
  random DenseSimplex           initialDistribution ?: latentSimplex(nLatentStates) 
  random DenseTransitionMatrix  transitionProbabilities ?: latentTransitionMatrix(nLatentStates)
  random List<RealVar>     means ?: latentListOfReal(nLatentStates), variances ?: latentListOfReal(nLatentStates)
         
  param  Matrix            concentrations ?: ones(nLatentStates).readOnlyView
  
  laws {
    // Priors on initial and transition probabilities
    initialDistribution | concentrations ~ Dirichlet(concentrations)  
    for (int latentStateIdx : 0 ..< means.size) {
      transitionProbabilities.row(latentStateIdx) | concentrations ~ Dirichlet(concentrations)
    }
    
    // Priors on means and variances
    for (int latentStateIdx : 0 ..< means.size) {
      means.get(latentStateIdx) ~ Normal(0.0, 1.0)
      variances.get(latentStateIdx) ~ Gamma(1.0, 1.0)
    }
    
    states | initialDistribution, transitionProbabilities  
      ~ MarkovChain(initialDistribution, transitionProbabilities)
      
    // Gaussian emissions
    for (int obsIdx : 0 ..< observations.size) {
      observations.get(obsIdx) |
        means, 
        variances, 
        IntVar curIndic = states.get(obsIdx)
      ~ Normal(means.get(curIndic), variances.get(curIndic))
    }
  }
}