package blang.validation.internals.fixtures

import org.junit.Assert
import blang.types.internals.RealScalar
import blang.types.internals.IntScalar

model Operations {
  
  laws {
    
    logf() {
      
      val RealVar r2 = new RealScalar(2.2)
      val RealVar r3 = new RealScalar(3.3)
      val IntVar i4 = new IntScalar(4)
      val IntVar i7 = new IntScalar(7)
      
      // those are taken care of by special rules in BlangExtensions (to avoid clashes with String -)
      Assert.assertEquals(r2 - r3, 2.2 - 3.3, 0.0)
      Assert.assertEquals(i4 - i7, 4 - 7)
      Assert.assertEquals(r2 - i4, 2.2 - 4, 0.0)
      Assert.assertEquals(i4 - r3, 4 - 3.3, 0.0)
      
      Assert.assertEquals(r2 - 3.3, 2.2 - 3.3, 0.0)
      Assert.assertEquals(i4 - 7, 4 - 7)
      Assert.assertEquals(r2 - i4, 2.2 - 4, 0.0)
      Assert.assertEquals(i4 - r3, 4 - 3.3, 0.0)
      
      Assert.assertEquals(2.2 - r3, 2.2 - 3.3, 0.0)
      Assert.assertEquals(4 - i7, 4 - 7)
      Assert.assertEquals(2.2 - i4, 2.2 - 4, 0.0)
      Assert.assertEquals(4 - r3, 4 - 3.3, 0.0)
      
      val RealVar r2_2 = new RealScalar(2.2)
      val IntVar i4_2 = new IntScalar(4)
      
      Assert.assertTrue(r2 == r2_2)
      Assert.assertTrue(r2 !== r2_2)
      Assert.assertTrue(r2 == 2.2)
      Assert.assertTrue(2.2 == r2)
      Assert.assertTrue(i4 == i4_2)
      Assert.assertTrue(i4 !== i4_2)
      Assert.assertTrue(i4 == 4)
      Assert.assertTrue(4 == i4)
      
      // those are box/unbox
      Assert.assertEquals(r2 * r3, 2.2 * 3.3, 0.0)
      Assert.assertEquals(i4 * i7, 4 * 7)
      Assert.assertEquals(r2 * i4, 2.2 * 4, 0.0)
      Assert.assertEquals(i4 * r3, 4 * 3.3, 0.0)
      
      Assert.assertEquals(r2 * 3.3, 2.2 * 3.3, 0.0)
      Assert.assertEquals(i4 * 7, 4 * 7)
      Assert.assertEquals(r2 * i4, 2.2 * 4, 0.0)
      Assert.assertEquals(i4 * r3, 4 * 3.3, 0.0)
      
      Assert.assertEquals(2.2 * r3, 2.2 * 3.3, 0.0)
      Assert.assertEquals(4 * i7, 4 * 7)
      Assert.assertEquals(2.2 * i4, 2.2 * 4, 0.0)
      Assert.assertEquals(4 * r3, 4 * 3.3, 0.0)
      
      Assert.assertEquals(r2 - r3, 2.2 - 3.3, 0.0)
      Assert.assertEquals(i4 - i7, 4 - 7)
      Assert.assertEquals(r2 - i4, 2.2 - 4, 0.0)
      Assert.assertEquals(i4 - r3, 4 - 3.3, 0.0)
      
      Assert.assertEquals(r2 - 3.3, 2.2 - 3.3, 0.0)
      Assert.assertEquals(i4 - 7, 4 - 7)
      Assert.assertEquals(r2 - i4, 2.2 - 4, 0.0)
      Assert.assertEquals(i4 - r3, 4 - 3.3, 0.0)
      
      Assert.assertEquals(2.2 - r3, 2.2 - 3.3, 0.0)
      Assert.assertEquals(4 - i7, 4 - 7)
      Assert.assertEquals(2.2 - i4, 2.2 - 4, 0.0)
      Assert.assertEquals(4 - r3, 4 - 3.3, 0.0)
      
      Assert.assertEquals(r2 / r3, 2.2 / 3.3, 0.0)
      Assert.assertEquals(i4 / i7, 4 / 7)
      Assert.assertEquals(r2 / i4, 2.2 / 4, 0.0)
      Assert.assertEquals(i4 / r3, 4 / 3.3, 0.0)
      
      Assert.assertEquals(r2 / 3.3, 2.2 / 3.3, 0.0)
      Assert.assertEquals(i4 / 7, 4 / 7)
      Assert.assertEquals(r2 / i4, 2.2 / 4, 0.0)
      Assert.assertEquals(i4 / r3, 4 / 3.3, 0.0)
      
      Assert.assertEquals(2.2 / r3, 2.2 / 3.3, 0.0)
      Assert.assertEquals(4 / i7, 4 / 7)
      Assert.assertEquals(2.2 / i4, 2.2 / 4, 0.0)
      Assert.assertEquals(4 / r3, 4 / 3.3, 0.0)
      
      Double.NaN
    }
    
  }
  
}