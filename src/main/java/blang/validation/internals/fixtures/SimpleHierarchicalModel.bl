package blang.validation.internals.fixtures

model SimpleHierarchicalModel  {
  param GlobalDataSource data
  param Plate<String> rocketTypes
  random Plated<IntVar> numberOfLaunches
  random Plated<RealVar> failureProbabilities
  random Plated<IntVar> numberOfFailures
  random RealVar a ?: realVar, b ?: realVar
  
  laws {
    a ~ Exponential(1)
    b ~ Exponential(1)
    for (Index<String> rocketType : rocketTypes.indices) {
      failureProbabilities.get(rocketType) | a, b ~ Beta(a + 0.5, b + 0.5) 
      numberOfLaunches.get(rocketType) ~ Poisson(2.0)
      numberOfFailures.get(rocketType) 
        | RealVar failureProbability = failureProbabilities.get(rocketType),
          IntVar numberOfLaunch = numberOfLaunches.get(rocketType)
        ~ Binomial(1+numberOfLaunch, failureProbability)
        // we add one here since for testing here we need to generate
        // numberOfLaunches, and we use a Poisson here so adding one so that 
        // we avoid getting zero as argument
    }
  }
}