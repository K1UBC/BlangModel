package blang.validation.internals.fixtures

import blang.types.Precision.Diagonal

model PoissonNormalField {
  
  param Boolean diagonal ?: true 
  
  param Plate<Integer> plate
  
  random Plated<RealVar> latents
  random Plated<IntVar> observations
  
  laws {
    
    // Prior:
    //hyperParam ~ Exponential(1.0)
    latents 
      | Precision<Integer> precision = 
          if (diagonal) diagonalPrecision(1.0, plate) 
          else          simpleBrownian(1.0, plate)
      ~ NormalField(precision)
    
    // Likelihood
    for (Index<Integer> index : plate.indices) {
      observations.get(index) | RealVar latent = latents.get(index) ~ Poisson({
        val double result = exp(latent)
        if (result == 0) 
          Generators::ZERO_PLUS_EPS
        else if (result == Double::POSITIVE_INFINITY)
          Double::MAX_VALUE
        else 
          result 
      })
    }
    
  }
}