package blang.validation.internals.fixtures

import java.util.function.Function
import blang.types.internals.IntScalar

model AutoBoxDeboxTests { 
  laws {
    logf() { 
      
      // Boxing/unboxing 
      
      val Function<Double,Double> d2d = Function.identity
      val Function<Integer,Integer> i2i = Function.identity
      val RealVar rv = latentReal
      val IntVar iv = new IntScalar(1)
      val List<Object> list = #[1,2]
      
      d2d.apply(rv) // test 1: realvar -> Double
      // d2d.apply(iv) // test 2: intvar -> Double // does not work, apparently java unboxing int -> Double not supported
//      val Double test = iv // same as above
      i2i.apply(iv) // test 3: intvar -> Integer
      
      Math.log(rv)  // test 4: realvar -> double
      Math.log(iv)  // test 5: intvar  -> double
      
      list.get(iv)  // test 6: intvar  -> int
      
      val RealVar v0 = 0.0 // test 7: double -> realvar
      
      val RealVar v1 = new Double(0.0) // test 8: Double -> realvar
      
      val IntVar v2 = 0 // test 9: int -> intvar
      val RealVar v3 = 0 // test 10: Integer -> realvar
      
      val IntVar v4 = new Integer(0) // test 11: Integer -> intvar
      val RealVar v5 = new Integer(0) // test 12: Integer -> realvar
      
      return v0 + v1 + v2 + v3 + v4 + v5
    }
  }
}