package blang.distributions

import static bayonet.math.SpecialFunctions.lnGamma
import static java.lang.Math.log

import static extension blang.utils.ExtensionUtils.*

import blang.core.RealVar

model Beta {
   
  random RealVar realization
  
  param  RealVar alpha, 
                 beta
  
  laws {
    
    logf(alpha, realization) {
      if (realization == 0.0) {
        // avoid return +INFINITY so that INF - INF does not occur
        return Double.NEGATIVE_INFINITY
      }
      (alpha.doubleValue - 1.0) * log(realization)
    }
    
    logf(beta, realization) {
      if (realization == 1.0) {
        // avoid return +INFINITY so that INF - INF does not occur
        return Double.NEGATIVE_INFINITY
      }
      (beta - 1.0) * log(1.0 - realization)
    }
        
    logf(alpha, beta) {
      lnGamma(alpha + beta)
    }
    
    logf(alpha) {
      - lnGamma(alpha)
    }
    
    logf(beta) {
      - lnGamma(beta)
    }
    
    indicator(alpha) {
      alpha > 0.0
    }
    
    indicator(beta) {
      beta > 0.0
    }
    
    indicator(realization) {
      realization >= 0.0 && realization <= 1.0
    }
    
  }
}