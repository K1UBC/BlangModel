package blang.distributions

import org.apache.commons.math3.distribution.GammaDistribution

model Dirichlet {
  
  random Simplex realization ?: simplex(2)
  
  param  Matrix concentrations ?: denseCopy(#[1,2])
  
  laws {
    
    for (int dim : 0 ..< concentrations.nEntries) {
      logf(
        RealVar concentration = concentrations.getRealVar(dim),
        RealVar x = realization.getRealVar(dim)
      ) {
        (concentration - 1.0) * log(x)
      }
      
      logf(RealVar concentration = concentrations.getRealVar(dim)) {
        - lnGamma(concentration)
      }
      
      indicator(RealVar concentration = concentrations.getRealVar(dim)) {
        concentration > 0.0
      }
    }
    
    logf(concentrations) {
      lnGamma(concentrations.sum) 
    }
    
    realization ~ new ConstrainedFactor()
  }
  
  generate(rand) { 
    var double sum = 0.0
    for (var int d = 0; d < concentrations.nEntries; d++)
    {
      val double gammaVariate = new GammaDistribution(rand.generator, concentrations.get(d), 1.0).sample 
      realization.set(d, gammaVariate)
      sum += gammaVariate
    }
    realization /= sum
  }
}