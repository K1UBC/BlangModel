package blang.distributions

import blang.types.RealVar
import blang.types.Simplex
import xlinear.Matrix

import static bayonet.math.SpecialFunctions.lnGamma
import static java.lang.Math.log

import static extension blang.utils.ExtensionUtils.*
import static extension xlinear.MatrixExtensions.*

model Dirichlet {
  
  random Simplex realization
  
  param  Matrix concentrations 
  
  laws {
    
    for (int dim : 0 ..< concentrations.nEntries) {
      logf(
        RealVar concentration = concentrations.getRealVar(dim),
        RealVar x = realization.getRealVar(dim)
      ) {
        (concentration.doubleValue - 1.0) * log(x.doubleValue)
      }
      
      logf(RealVar concentration = concentrations.getRealVar(dim)) {
        - lnGamma(concentration.doubleValue)
      }
      
      indicator(RealVar concentration = concentrations.getRealVar(dim)) {
        concentration.doubleValue > 0.0
      }
    }
    
    logf(concentrations) {
      lnGamma(concentrations.sum) 
    }
    
    realization ~ new blang.core.ConstrainedFactor() 
  }
}