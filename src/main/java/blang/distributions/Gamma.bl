package blang.distributions

model Gamma {
  random RealVar realization
  param  RealVar shape, rate
  
  laws {
    logf(shape, rate, realization) {
      if (shape <= 0.0 || rate <= 0) return NEGATIVE_INFINITY
      if (realization <= 0.0) return NEGATIVE_INFINITY
      return (shape - 1.0) * log(realization * rate)
    }
    logf(realization, rate) {
      if (rate <= 0) return NEGATIVE_INFINITY
      if (realization <= 0.0) return NEGATIVE_INFINITY
      return - realization * rate
    }
    logf(shape) {
      if (shape <= 0.0)  return NEGATIVE_INFINITY
      return - lnGamma(shape)
    }
    logf(rate) {
      if (rate <= 0.0) return NEGATIVE_INFINITY
      return log(rate)
    }
  }
  
  generate(rand) {
    Generators::gamma(rand, shape, rate)
  }
}