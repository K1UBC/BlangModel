package blang.distributions

/** Gamma random variable. Values in \((0, \infty)\). */
model Gamma {
  random RealVar realization
  
  /** The shape \(\alpha\) is proportional to the mean and variance. \( \alpha > 0 \) */
  param  RealVar shape
  
  /** The rate \(\beta\) is inverse proportional to the mean and quadratically inverse proportional to the variance. \( \beta > 0 \) */
  param  RealVar rate
  
  laws {
    logf(shape, rate, realization) {
      if (shape <= 0.0 || rate <= 0) return NEGATIVE_INFINITY
      if (realization <= 0.0) return NEGATIVE_INFINITY
      return (shape - 1.0) * log(realization * rate)
    }
    logf(realization, rate) {
      if (rate <= 0) return NEGATIVE_INFINITY
      if (realization <= 0.0) return NEGATIVE_INFINITY
      return - realization * rate
    }
    logf(shape) {
      if (shape <= 0.0)  return NEGATIVE_INFINITY
      return - lnGamma(shape)
    }
    logf(rate) {
      if (rate <= 0.0) return NEGATIVE_INFINITY
      return log(rate)
    }
  }
  
  generate(rand) {
    rand.gamma(shape, rate)
  }
}